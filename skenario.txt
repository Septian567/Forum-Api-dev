skenario 1  -- fokus pada skenario --  success

1. gabungkan comment use case jadi 1
2. sesuaikan handler, sesuaikan container
3. orkestrasikan fungsi verifyCommentAvailabilty agar di panggil di use case (get comment Use case)

langkah

1. upload AddCommentUseCase
2. upload DeleteCommentUseCase
3. gabungkan jadi file use case
4. upload file handler
5. sesuaikan file handler
6. upload container
7. sesuaikan container

prompt skenario 1

saya mempunyai 2 kode use case yang berkaitan dengan menambahkan dan menghapus komentar. saya ingin menggabungkan 2 kode itu jadi satu file kode saja. sebelum itu bisa simpan kode saya dulu? 

upload kode

gabungkan dua file kode use case itu menjadi satu use case saja yang disebut CommentUseCase.js
saya juga mempunyai file handler.js yang perlu disesuaikan. bisa simpan kode handler.js saya?
upload handler.js
sesuaikan kode use case yang baru ke dalam file handler.js
saya juga punya kode container.js berikut ini potongan kode dengan use case yang lama, sesuaikan container.js dengan use case yang baru.

upload potongan kode

-- success

skenario 2 -- success (with add comment error)
1. pindahkan pemanggilan fungsi verifyCommentAvailabilty ke use case
2. sesuaikan file CommentRepository
3. sesuaikan file CommentRepositoryPostgres
4. Sesuaikan file CommentUseCase
5. sesuaikan file handler


langkah
1. upload file CommentRepositoryPostgres - done
2. upload file CommentRepository - done
3. upload file CommentUseCase - done
4. pindahkan pemanggilan fungsi verifyCommentAvailabilty ke use case dengan menyesuaikan file CommentRepository. tambahkan pada use case fungsi getComment untuk memanggil fungsi verifyCommentAvailabilty - done
5. perbaikan apabila ada error (sesuaikan handler.js) - masih error
6. perbaiki kode CommentRepositoryPostgres - masih error

prompt
1. hapus data awal
2. saya mempunyai beberapa file js dan ingin membuat api yang menerapkan clean architecture
berikut ini lokasi file saya

src/Domains/comments/CommentRepository.js
src/Infrastructures/repository/CommentRepositoryPostgres.js
src/Applications/use_case/comments/CommentUseCase.js

simpan informasi ini dan jawab ya
3. upload masing-masing file
4. pada file CommentRepositoryPostgres.js pindahkan pemanggilan fungsi verifyCommentAvailabilty dari getCommentById ke use case dengan menyesuaikan file CommentRepository, CommentUseCase, dan CommentRepositoryPostgres. tambahkan pada use case fungsi getComment untuk memanggil fungsi verifyCommentAvailabilty.
5. saya juga mempunyai kode handler.js, lakukan penyesuaian kode handler.js dengan kode CommentUseCase yang baru. berikut kode handler.js
6. bisa berikan kode CommentRepositoryPostgres.js terbaru dengan lengkap

skenario 3 -- success
1. bandingkan file CommentUseCase.js yang bisa tambah komentar dan yang bisa tangkap pesan error
2. gabungkan dan cari kebenaran

prompt
1. saya mempunyai beberapa 2 file use case js. Masing - masing adalah CommentUseCaseA.js dan CommentUseCaseE.js.
saya ingin melihat perbedaan dari dua kode itu. bisa simpan kode itu terlebih dulu untuk saya?

2. upload file.

skenario 4 - failed (tidak  perlu di cek ulang)
1. pindahkan pengecekan ada tidaknya komentar dari deleteComment ke fungsi verifyCommentAvailabilty
2. sesuaikan CommentRepositoryPostgres
3. sesuaikan fungsi verifyCommentAvailabilty

prompt
1. pindahkan logika ini ke verifyCommentAvailability --  failed
2. gabungkan logika ini ke verifyCommentAvailability, sehingga logika if tidak di duplikasi di deleteComment -- failed
3. lakukan refactoring untuk mengurangi duplikasi kode --failed
4. hapus logika if -- success

skenario 5 -- success
1. perbaiki query deleteComment (hapus yang tidak perlu)
2. hapus bagian yang tidak perlu dari fungsi deleteComment

skenario 6 - failed
1. pindahkan pemanggilan fungsi verifyThreadAvailabilty ke use case
2. sesuaikan file ThreadRepository
3. sesuaikan file ThreadRepositoryPostgres
4. Sesuaikan file ThreadUseCase
5. sesuaikan file handler


langkah
1. upload file ThreadRepositoryPostgres
2. upload file ThreadRepository
3. upload file ThreadUseCase
4. pindahkan pemanggilan fungsi verifyThreadAvailabilty ke use case dengan menyesuaikan file ThreadRepository. tambahkan pada use case fungsi getThreadById untuk memanggil fungsi verifyThreadAvailabilty
5. perbaikan apabila ada error

prompt
1. hapus data awal
2. saya mempunyai beberapa file js dan ingin membuat api yang menerapkan clean architecture
berikut ini lokasi file saya

src/Domains/threads/ThreadRepositoryRepository.js
src/Infrastructures/repository/ThreadRepositoryPostgres.js
src/Applications/use_case/threads/ThreadUseCase.js

simpan informasi ini dan jawab ya
3. upload masing-masing file
4. pada file ThreadRepositoryPostgres.js panggil fungsi verifyThreadAvailabilty dari getThreadById ke use case dengan menyesuaikan file ThreadRepository, ThreadUseCase, dan ThreadRepositoryPostgres. panggil fungsi verifyThreadAvailabilty pada ThreadUseCase yang memerlukan threadId. Sehingga pada file ThreadRepositoryPostgres.js, fungsi getThreadById tidak perlu memanggil fungsi verifyThreadAvailability karena sudah dipanggil di use case
5. saya juga mempunyai kode handler.js, lakukan penyesuaian kode handler.js dengan kode ThreadUseCase yang baru. berikut kode handler.js

skenario 7  -- failed
1. periksa semua tempat verifikasi thread id digunakan
2. implementasikan di semua tempat itu

prompt
saya mempunyai kode js dan ingin membuat api yang menerapkan clean architecture
berikut ini lokasi file saya

src/Applications/use_case/threads/ThreadUseCase.js

simpan informasi ini dan jawab ya

salah satu ciri cleanArchitecture adalah memiliki use case. pada kode ThreadUseCases.js
panggil fungsi verifyThreadAvailability di _getThreadById, _getCommentsByThreadId, dan getDetailsThread

skenario 8 - failed
1. panggil fungsi verifyThreadAvailability pada fungsi getDetailsThread

saya mempunyai beberapa file js dan ingin membuat api yang menerapkan clean architecture
berikut ini lokasi file saya

src/Domains/threads/ThreadRepository.js
src/Infrastructures/repository/ThreadRepositoryPostgres.js
src/Applications/use_case/threads/getDetailsThreadUseCase.js

simpan informasi ini dan jawab ya

upload file

pada file ThreadRepositoryPostgres.js pindahkan pemanggilan fungsi verifyThreadAvailability dari getCommentById ke use case dengan menyesuaikan file ThreadRepository, getDetailsThreadUseCaseUseCase, dan ThreadRepositoryPostgres.

skenario 9
1. panggil fungsi verifyThreadAvailability di use case

prompt
saya mempunyai beberapa file js dan ingin membuat api yang menerapkan clean architecture
berikut ini lokasi file saya

src/Domains/comments/ThreadRepository.js
src/Infrastructures/repository/ThreadRepositoryPostgres.js
src/Applications/use_case/comments/GetDetailsThreadUseCase.js

simpan informasi ini dan jawab ya
upload file
panggil fungsi verifyThreadAvailability pada kode use case GetDetailsThreadUseCase.js